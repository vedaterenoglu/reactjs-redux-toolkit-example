
--SINGLE SOURCE OF TRUTH (SSOT) IMPLEMENTATION

OBJECTIVE
Eliminate all data duplication by establishing centralized definitions across the codebase.
ANALYSIS PHASE

AUDIT: Find all duplicate definitions (types, constants, configs, schemas)
IDENTIFY: Categorize duplications (exact, semantic, partial, evolutionary)
PRIORITIZE: HIGH (core entities) → MEDIUM (shared utilities) → LOW (reusable types)

IMPLEMENTATION STRUCTURE
src/
├── types/          # All TypeScript definitions
│   ├── core/       # Business entities
│   ├── api/        # API contracts
│   └── ui/         # UI-specific types
├── constants/      # All constant values
│   ├── api.ts      # Endpoints, status codes
│   ├── business.ts # Rules, limits
│   └── validation.ts # Patterns, rules
└── config/         # All configurations
    ├── environment.ts
    └── features.ts
MIGRATION PROCESS

CREATE: Centralized definitions first
UPDATE: Imports incrementally (file-by-file)
REMOVE: Duplicates after successful migration
VALIDATE: No broken references
TEST: Full test suite passes

MANDATORY CONSTRAINTS

✅ Centralize all shared definitions (DO)
✅ Use barrel exports for clean imports (DO)
✅ Migrate incrementally to avoid breaks (DO)
✅ Document any intentional exceptions (DO)
❌ NEVER duplicate business entity types (NOT DO)
❌ NEVER copy-paste shared constants (NOT DO)

VERIFICATION:

 All shared types in centralized location
 Barrel exports implemented
 No duplicate definitions found
 Exceptions documented with rationale

🚫 FORBIDDEN

❌ NEVER redefine existing types locally (NOT DO)
❌ NEVER create parallel type definitions (NOT DO)
❌ NEVER skip migration testing (NOT DO)
❌ NEVER ignore ESLint SSOT rules (NOT DO)
✅ Reference only from central source (DO)
✅ Remove duplicates after migration (DO)

VERIFICATION:

 No local type redefinitions
 All imports from central source
 ESLint rules enforced
 Old duplicates removed

✅ SUCCESS CRITERIA

✅ Zero duplicate type definitions (DO)
✅ All imports use central sources (DO)
✅ TypeScript compilation succeeds (DO)
✅ 100% test coverage maintained (DO)
✅ ESLint rules prevent future duplication (DO)
❌ NEVER compromise type safety (NOT DO)

VERIFICATION:

 Duplication audit shows zero
 Import analysis confirms SSOT
 All tests passing
 ESLint rules active and enforced

DELIVERABLES

Centralized Structure: Types, constants, configs organized
Migration Plan: File-by-file update sequence
Import Updates: All references point to central source
ESLint Rules: Automated SSOT enforcement
Documentation: SSOT patterns and guidelines

ACCEPTABLE EXCEPTIONS

Test-specific mocks and fixtures
Component-internal types (not shared)
Performance-critical optimizations (documented)
Temporary migration states (marked with TODO)