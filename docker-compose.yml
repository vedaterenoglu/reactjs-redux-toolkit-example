version: '3.8'

services:
  # Frontend React Application
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - VITE_API_BASE_URL=${VITE_API_BASE_URL:-http://localhost:3060}
        - VITE_APP_URL=${VITE_APP_URL:-http://localhost:3061}
        - VITE_STRIPE_PUBLISHABLE_KEY=${VITE_STRIPE_PUBLISHABLE_KEY}
        - VITE_CLERK_PUBLISHABLE_KEY=${VITE_CLERK_PUBLISHABLE_KEY}
    container_name: events-frontend
    ports:
      - '3061:80'
    environment:
      - NODE_ENV=production
    networks:
      - events-network
    depends_on:
      - backend
    restart: unless-stopped
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.frontend.rule=Host(`localhost`)'
      - 'traefik.http.services.frontend.loadbalancer.server.port=80'
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost/']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Development Frontend (for development mode)
  frontend-dev:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: events-frontend-dev
    ports:
      - '3061:3061'
    volumes:
      - .:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - VITE_API_BASE_URL=${VITE_API_BASE_URL:-http://localhost:3060}
      - VITE_APP_URL=${VITE_APP_URL:-http://localhost:3061}
      - VITE_STRIPE_PUBLISHABLE_KEY=${VITE_STRIPE_PUBLISHABLE_KEY}
      - VITE_CLERK_PUBLISHABLE_KEY=${VITE_CLERK_PUBLISHABLE_KEY}
    networks:
      - events-network
    depends_on:
      - backend
    restart: unless-stopped
    profiles:
      - dev

  # Mock Backend API (for testing without real backend)
  backend:
    image: mockserver/mockserver:5.15.0
    container_name: events-backend-mock
    ports:
      - '3060:1080'
    environment:
      - MOCKSERVER_LOG_LEVEL=INFO
      - MOCKSERVER_SERVER_PORT=1080
    networks:
      - events-network
    restart: unless-stopped
    volumes:
      - ./docker/mockserver:/config
    command: >
      -serverPort 1080
      -logLevel INFO
      -proxyRemotePort 80
      -proxyRemoteHost httpbin.org
    profiles:
      - mock

  # PostgreSQL Database (for full backend integration)
  postgres:
    image: postgres:15-alpine
    container_name: events-postgres
    ports:
      - '5432:5432'
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-events_db}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d
    networks:
      - events-network
    restart: unless-stopped
    profiles:
      - full

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: events-redis
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
    networks:
      - events-network
    restart: unless-stopped
    profiles:
      - full
    command: redis-server --appendonly yes

  # Nginx reverse proxy (for production setup)
  nginx:
    image: nginx:alpine
    container_name: events-nginx
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/ssl:/etc/nginx/ssl
    networks:
      - events-network
    depends_on:
      - frontend
    restart: unless-stopped
    profiles:
      - production

# Named volumes for data persistence
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

# Custom network for container communication
networks:
  events-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
